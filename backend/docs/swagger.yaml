basePath: /api
definitions:
  models.Post:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      image_url:
        type: string
      privacy:
        type: string
      title:
        type: string
      userId:
        type: string
    type: object
  models.User:
    properties:
      about_me:
        type: string
      avatar_url:
        type: string
      birth_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API server for Social Network application
  title: Social Network API
  version: "1.0"
paths:
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate a user and create a session
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid credentials
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /auth/signout:
    post:
      consumes:
      - application/json
      description: End user session
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User logout
      tags:
      - auth
  /posts/create:
    post:
      consumes:
      - application/json
      description: Create a new post in the system
      parameters:
      - description: Post creation details
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Post created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Failed to create post
          schema:
            type: string
      summary: Create a new post
      tags:
      - posts
  /posts/delete:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Post ID is required
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Failed to delete post
          schema:
            type: string
      summary: Delete post
      tags:
      - posts
  /posts/get:
    get:
      consumes:
      - application/json
      description: Get post details by post ID
      parameters:
      - description: Post ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Post ID is required
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Failed to get post
          schema:
            type: string
      summary: Get post by ID
      tags:
      - posts
  /posts/list:
    get:
      consumes:
      - application/json
      description: Get a paginated list of posts
      parameters:
      - description: Number of posts to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of posts to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list posts
          schema:
            type: string
      summary: List posts
      tags:
      - posts
  /users/delete:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: User ID is required
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Failed to delete user
          schema:
            type: string
      summary: Delete user
      tags:
      - users
  /users/get:
    get:
      consumes:
      - application/json
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: User ID is required
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Failed to get user
          schema:
            type: string
      summary: Get user by ID
      tags:
      - users
  /users/list:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users
      parameters:
      - description: Number of users to return (default 10)
        in: query
        name: limit
        type: integer
      - description: Number of users to skip (default 0)
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to list users
          schema:
            type: string
      summary: List users
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            type: string
        "500":
          description: Failed to register user
          schema:
            type: string
      summary: Register a new user
      tags:
      - users
  /users/update:
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      - description: User update details
        in: body
        name: user
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Updated user details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Failed to update user
          schema:
            type: string
      summary: Update user
      tags:
      - users
swagger: "2.0"
